Classes and types
Lobby (type):
- manages information about players
- has a unique id
- possibly contains a GameState
GameState:
- manages pretty much everything about the game
- keeps master arrays of buildings and units
- tracks data about turns, Players, the battlefield of tiles
- is used by other classes to start/end turns as well as get information about other parts of the game
- is called to manage movement, attacks, and ability activations
- *does not manage turn timer! This should be managed by index.ts!
Tile:
- terrain type
- occupant reference (through Coordinate) and occupant type (building/unit)

Player:
- socket id
- faction and team
- name
- connected status
- PlayerInfo for other game-relevant information
PlayerInfo:
- energy and money
- building ownership (array)
- unit ownership (array)
- hand (array)
- deck
- Called to draw, discard, and play cards
- Called for building upkeep (make sure buildings are not using more energy than available)
Card
- Contains basic info of a card
Unit
- HP, SPD, ATK, RAN (as base stats too)
- passive abilities
- active abilities
type UnitType = {
    attack: ...
    maxHealth, speed, 
    attributes: string[]
}
type Unit = {
    type: UnitType
    move()
    attack()
    takeDamge()
    die()
    ...
}
Building
- similar to unit

Game Flow
[Menu] > Start game / Join Game > 
[Lobby] > Choose factions & teams > Host starts game > 
[Game] > Play game > Game ends > 
[GameEnd] > Goto Menu / Goto Lobby / View GameState

Game mechanics
 - Turn end: All of your buildings get -1 building cooldown
 - Turn start: Gain resources from your producers
    - When you don't have enough energy, your buildings start shutting down (latest buildings first)

Energy Implementation
 - Each user (Player.PlayerStats)'s energy property tracks the current energy output
 - When a building generates or stops generating energy, the user's energy property is changed accordingly
 - If the user's energy output is ever less than energy usage, their buildings will be deactivated in order of last built

Units
 - Movement
    - Each unit may be commanded to move once per turn and attack once per turn (unless otherwise specified)
    - The client will send the server an array of steps as a move
    - If a step causes a unit to detect an invisible unit, the unit stops and may be commanded to move again
    - Speed is the number of steps a unit can take each turn. Detecting an invisible unit does not replenish this.
    - Units move taxicab-wise. That is to say, they can move up, down, left, right but not diagonally.
 - Range
    - Unit range uses euclidean distance, from the center of their tile to the center of the target tile
    - Melee units have range 1 or 1.5, depending on whether or not they can target diagonally.
 - Line-of-sight
    - Units and buildings block line of sight. In the future, some terrain might also do so.
    - Draw line from center of source tile to center of target tile. If the line intersects
      any square that blocks line of sight, then line of sight is blocked.
       - If the line passes through a corner, then the corner must be blocked on both sides
         in order to block line of sight.
 - Sight (for purposes of fog of war, which is not currently implemented)
    - Uses euclidean distance & line of sight
 - Attacking
    - Non-splash attacks may not target empty tiles
    - Units may not target themselves with their own attacks
    - Currently, friendly fire is otherwise permitted

Buildings
 - Events
    - building-spawn: When the Client receives a building-spawn event, it should check to see whether or not its buildLeft is 0.
      If so, the building is spawned built and should be treated accordingly.
      If not, the building is spawned under construction and should be treated accordingly (including visuals).
    - build-tick: When the Client receives a build-tick event, it should check to see whether or not the building's buildLeft is 0.
      If so, the building has finished construction. There is no explicit event for construction completion. 

Cards
 - Players start the game with 5 Cards
 - Players draw 1 card per turn
 - If the deck is empty when a draw is attempted, the draw just fails (no card is drawn)
 - *Above card rules are liable to change

Spawning
 - Buildings are spawned adjacent (not diagonal) to a unit
 - At the end of your turn, each adjacent unit contributes 1 to building construction
 - Building health starts at 1/(x+1) when placed and gains 1/(x+1) per build tick, where x is total build ticks needed
 - Units can be spawned within distance of 2 of a building (or just HQ?)
 - Units spawn with no attacks and moves left
 - *Playtesting required to finalize above rules

Win Condition
 - When a player's headquarters is destroyed, they lose the ability to play cards and command their units and buildings
 - When a team loses all of their headquarters, they lose and the other team wins

Start of Turn:
 - The server sends the "turn-start" event first, then any events resulting from turn start
 - The server does not sent events for resetting unit moves, steps, and attacks, building moves, and player end-turn status resets.
   Those events should be automatically done by the client.

End of Turn:
 - The server sends the "turn-end" event first, then any events resulting from turn end
 - The server does not sent an event for changing the turn number. The client should adjust the turn number automatically.

 Note: It is difficult to send functions over sockets. Do not have a loop with objects that reference each other.
 In order to facilitate that, we are removing circular and duplicate references within Players and GameStates.
 When storing or sending a game, we ignore the Game class and instead just serialize the GameState class.